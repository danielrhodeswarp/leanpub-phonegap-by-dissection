# The *Discover* tab {#chapter-8}

## Layout and interface {#chapter-8-1}

Now we move on to our second tab, Discover. This is going to be much simpler than the
previous tab so don't worry! This chapter is a bit of a breather before we move on to
the more complex Write tab.

The discover tab is simply going to be a passive list of the latest Japanese words
as tweeted by the [@japxlate](https://twitter.com/japxlate) bot. There will be no interactivity.

Note that, to speed up development and debugging, we can temporarily set the Discover tab to
be the app's default tab. This saves you having to tap on the tab every time you run the app when following
this chapter. Simply move the `class="current"`s off the Search tab and content div and onto the Discover tab and content div.

Conveniently, anyone with a Twitter account can go into Settings --> Widgets
and create embeddable timeline widgets - of their own feed or anyone else's - 
based on User timeline, Favourites, List or Search.

I've set up a User timeline widget under the actual [@japxlate](https://twitter.com/japxlate) account using these
settings:

![Figure 35. Creating a User timeline widget on Twitter](images/fig_350.png)

Note that in order to show only our tweets out (ie. word definitions) we exclude replies
and we do not auto-expand photos.
Note also that the widget **must** have a height in pixels - either the Twitter default or
your specification. After creating the widget, we get the similar-looking Configuration page:

![Figure 36. Configuring a User timeline widget on Twitter](images/fig_360.png)

This tells us that we can embed the widget anywhere we want by using this code snippet:

{lang="html"}
~~~~~~~~
<a class="twitter-timeline" href="https://twitter.com/japxlate" data-widget-id="378630691635728384">Tweets by @japxlate</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
~~~~~~~~

Which is a stylised <a> element followed by some arcane looking JavaScript
which actually creates, programatically, a <script> tag with the appropriate
JavaScript from Twitter to turn the <a> element into the correct widget.
Clever!

Let's go ahead and stick this in the HTML for our Discover tab and see what happens.
Make the Discover tab in `index.html` look like this:

{lang="html"}
~~~~~~~~
<div id="discover" class="current">
    <a class="twitter-timeline" href="https://twitter.com/japxlate" data-widget-id="378630691635728384">
        Tweets by @japxlate (network connection required) <img src="img/spinner.gif">
    </a>
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
</div>
~~~~~~~~

(Note here we have made Discover the default content div as mentioned before - make sure to also set the
Discover tab too.)

We've changed the <a> inner text a bit. This text shows *before* the widget has loaded.

Running this looks like:

![Figure 37. Embed of default Twitter User timeline widget](images/fig_370.png)

Which is pretty much a disaster! We've got a header and footer to the widget that doesn't
make sense in this *read-only* context - we want just the tweets remember?
We've also got a scrollbar due to overflowing content - again we don't want this.
Digging deeper into the Twitter documentation, we see from [https://dev.twitter.com/docs/embedded-timelines#customization](https://dev.twitter.com/docs/embedded-timelines#customization)
that adding:

{lang="html"}
~~~~~~~~
data-chrome="noheader nofooter"
~~~~~~~~

to the <a> tag will remove the header and footer. ("Chrome" here means the framing and embellishment
of the widget - not Chrome browser!) 
Note that the `noscrollbar` option mentioned in the above Twitter documentation will only *visually* remove the scrollbar, scrollability is still present
and so we will instead remove scrollbars and scrollability with CSS techniques soon.

Add `data-chrome="noheader nofooter"` to the <a> and running it looks like this:

![Figure 38. Embed of headerless and footerless Twitter User timeline widget](images/fig_380.png)

The widget header and footer have indeed gone, but there is still the scrolling issue. Also, the widget
is rather narrow and doesn't take up the full width of the screen.
Debugging in desktop Chrome we can use the "inspect element" tool which is the magnifying glass
at the bottom of the F12 console. This tells us that the <a> is replaced with an iframe.
An iframe is, simplistically, like an embedded browser window in your web page. This
will have ramifications for our app which we mention later on.

The above Twitter documentation for timelines says:

> "Setting a width is not required, and by default the widget will shrink to the width of its parent element in the page." 

Which implies that if we put the <a> in a parent div of `width:100%`, then the widget will fill the width
of the screen. Let's try it. Put the <a> and <script> in a parent tag thus:

{lang="html"}
~~~~~~~~
<div id="twitter-iframe-container">
    <a>…</a>
    <script>…</script>
</div>
~~~~~~~~

Then style this parent div in `index.css` like this:

{lang="css"}
~~~~~~~~
#twitter-iframe-container {
    position:absolute;  /*can now position relative to .japxlate_app which is*/
    top:0;              /*this div's first non-static parent*/
    bottom:0;
    width:100%;
    overflow:hidden;    /*clip overflowing content*/
}
~~~~~~~~

A `position:absolute` element can be positioned relative to its first non-static parent (static being `position:static` or the default position for when position is unspecified).
For us here that means the .japxlate_app div which slots perfectly between the app header and footer.
Setting a top and bottom of zero here means our div will stretch to fill the area that .japxlate_app covers.
(Which conveniently gets rid of the `padding-top:1em;` we gave to .japxlate_app which is less
than useful here.)
So this is going to remove the Twitter widget scrolling and width issues you say? Check it out:

![Figure 39. Widget scrolling removed but only for desktop Chrome](images/fig_390.png)

OK, so scrolling is fixed. **But** only on desktop Chrome and not the device. The widget width is also still static:

![Figure 40. Widget width is fixed and does not fill the available space](images/fig_400.png)

Well, we've got the perfect size *container* for this widget now, so what about forcing the
width and height of the generated <iframe> to the full size of this container? It's actually
pretty easy to do this by adding some CSS rules for <iframe>s in our `index.css`:

{lang="css"}
~~~~~~~~
iframe {
    width:100%;
    max-height:100%;
}
~~~~~~~~

We simply say that the <iframe> should fill its parent's width, and should never go taller than
the parent's height.
Run this on your device and it works! You can go landscape or portrait and the widget always
fills the available width and never scrolls.

We mentioned earlier some issues with <iframe>s. Well, the Discover widget timeline contains
any links that the tweets themselves contain. Also, there are some buttons for Twitter
"intents" like replying, favouriting and retweeting. Clicking on any link actually opens that
link in the <iframe> - replacing the widget - which looks like this:

![Figure 41. Links in the User timeline widget can be clicked - opening the page](images/fig_410.png)

Disaster! Clicking one of the Twitter intents (which would actually be kinda
cool to get working from the app), for example "reply", flows like this:

![Figure 42. Flow when clicking "reply" from timeline widget](images/fig_420.png)

So it already sorta kinda works in two different ways, but each has its issues. We are going to let this slide for the first release of the app, but this issue
really needs to be addressed. Perhaps the widget itself has some useful customisation options?
Or maybe links could be made to look non-linky by some CSS in our app? Or JavaScript
click catching?

## Extra credit challenges {#chapter-8-2}

X> Solutions not provided. Try to add:</p>
X>
X> 1. Disabling of clickable intents on tweets in the timeline widget OR..
X> 2. ..Correct functioning of the clickable intents when the Twitter app is selected (and not the browser)
X> 3. Instead of simply displaying "(network connection required)", use the [Connection API plugin](http://docs.phonegap.com/en/3.1.0/cordova_connection_connection.md.html#Connection) to properly detect if the device is currently online or not. If it's not online, then do something to inform the user that the Discover tab needs the device to be online.

